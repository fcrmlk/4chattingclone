{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/core/services/vg-api.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/core/services/vg-api.js","mtime":1547199365000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar vg_states_1 = require(\"../states/vg-states\");\nvar VgAPI = /** @class */ /*@__PURE__*/ (function () {\n    function VgAPI() {\n        this.medias = {}; // TODO: refactor to Set<IPlayable> \n        this.playerReadyEvent = new core_1.EventEmitter(true);\n        this.isPlayerReady = false;\n    }\n    VgAPI.prototype.onPlayerReady = function (fsAPI) {\n        this.fsAPI = fsAPI;\n        this.isPlayerReady = true;\n        this.playerReadyEvent.emit(this);\n    };\n    VgAPI.prototype.getDefaultMedia = function () {\n        for (var item in this.medias) {\n            if (this.medias[item]) {\n                return this.medias[item];\n            }\n        }\n    };\n    VgAPI.prototype.getMasterMedia = function () {\n        var master;\n        for (var id in this.medias) {\n            if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {\n                master = this.medias[id];\n                break;\n            }\n        }\n        return master || this.getDefaultMedia();\n    };\n    VgAPI.prototype.isMasterDefined = function () {\n        var result = false;\n        for (var id in this.medias) {\n            if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    };\n    VgAPI.prototype.getMediaById = function (id) {\n        if (id === void 0) {\n            id = null;\n        }\n        var media = this.medias[id];\n        if (!id || id === '*') {\n            media = this;\n        }\n        return media;\n    };\n    VgAPI.prototype.play = function () {\n        for (var id in this.medias) {\n            if (this.medias[id]) {\n                this.medias[id].play();\n            }\n        }\n    };\n    VgAPI.prototype.pause = function () {\n        for (var id in this.medias) {\n            if (this.medias[id]) {\n                this.medias[id].pause();\n            }\n        }\n    };\n    Object.defineProperty(VgAPI.prototype, \"duration\", {\n        get: function () {\n            return this.$$getAllProperties('duration');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"currentTime\", {\n        get: function () {\n            return this.$$getAllProperties('currentTime');\n        },\n        set: function (seconds) {\n            this.$$setAllProperties('currentTime', seconds);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"state\", {\n        get: function () {\n            return this.$$getAllProperties('state');\n        },\n        set: function (state) {\n            this.$$setAllProperties('state', state);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"volume\", {\n        get: function () {\n            return this.$$getAllProperties('volume');\n        },\n        set: function (volume) {\n            this.$$setAllProperties('volume', volume);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"playbackRate\", {\n        get: function () {\n            return this.$$getAllProperties('playbackRate');\n        },\n        set: function (rate) {\n            this.$$setAllProperties('playbackRate', rate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"canPlay\", {\n        get: function () {\n            return this.$$getAllProperties('canPlay');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"canPlayThrough\", {\n        get: function () {\n            return this.$$getAllProperties('canPlayThrough');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"isMetadataLoaded\", {\n        get: function () {\n            return this.$$getAllProperties('isMetadataLoaded');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"isWaiting\", {\n        get: function () {\n            return this.$$getAllProperties('isWaiting');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"isCompleted\", {\n        get: function () {\n            return this.$$getAllProperties('isCompleted');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"isLive\", {\n        get: function () {\n            return this.$$getAllProperties('isLive');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"isMaster\", {\n        get: function () {\n            return this.$$getAllProperties('isMaster');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"time\", {\n        get: function () {\n            return this.$$getAllProperties('time');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"buffer\", {\n        get: function () {\n            return this.$$getAllProperties('buffer');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"buffered\", {\n        get: function () {\n            return this.$$getAllProperties('buffered');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"subscriptions\", {\n        get: function () {\n            return this.$$getAllProperties('subscriptions');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgAPI.prototype, \"textTracks\", {\n        get: function () {\n            return this.$$getAllProperties('textTracks');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VgAPI.prototype.seekTime = function (value, byPercent) {\n        if (byPercent === void 0) {\n            byPercent = false;\n        }\n        for (var id in this.medias) {\n            if (this.medias[id]) {\n                this.$$seek(this.medias[id], value, byPercent);\n            }\n        }\n    };\n    VgAPI.prototype.$$seek = function (media, value, byPercent) {\n        if (byPercent === void 0) {\n            byPercent = false;\n        }\n        var second;\n        var duration = media.duration;\n        if (byPercent) {\n            if (this.isMasterDefined()) {\n                duration = this.getMasterMedia().duration;\n            }\n            second = value * duration / 100;\n        }\n        else {\n            second = value;\n        }\n        media.currentTime = second;\n    };\n    VgAPI.prototype.addTextTrack = function (type, label, language) {\n        for (var id in this.medias) {\n            if (this.medias[id]) {\n                this.$$addTextTrack(this.medias[id], type, label, language);\n            }\n        }\n    };\n    VgAPI.prototype.$$addTextTrack = function (media, type, label, language) {\n        media.addTextTrack(type, label, language);\n    };\n    VgAPI.prototype.$$getAllProperties = function (property) {\n        var medias = {};\n        var result;\n        for (var id in this.medias) {\n            if (this.medias[id]) {\n                medias[id] = this.medias[id];\n            }\n        }\n        var nMedias = Object.keys(medias).length;\n        switch (nMedias) {\n            case 0:\n                // Return default values until vgMedia is initialized\n                switch (property) {\n                    case 'state':\n                        result = vg_states_1.VgStates.VG_PAUSED;\n                        break;\n                    case 'playbackRate':\n                    case 'volume':\n                        result = 1;\n                        break;\n                    case 'time':\n                        result = { current: 0, total: 0, left: 0 };\n                        break;\n                }\n                break;\n            case 1:\n                // If there's only one media element then return the plain value\n                var firstMediaId = Object.keys(medias)[0];\n                result = medias[firstMediaId][property];\n                break;\n            default:\n                // TODO: return 'master' value\n                var master = this.getMasterMedia();\n                result = medias[master.id][property];\n        }\n        return result;\n    };\n    VgAPI.prototype.$$setAllProperties = function (property, value) {\n        for (var id in this.medias) {\n            if (this.medias[id]) {\n                this.medias[id][property] = value;\n            }\n        }\n    };\n    VgAPI.prototype.registerElement = function (elem) {\n        this.videogularElement = elem;\n    };\n    VgAPI.prototype.registerMedia = function (media) {\n        this.medias[media.id] = media;\n    };\n    VgAPI.prototype.unregisterMedia = function (media) {\n        delete this.medias[media.id];\n    };\n    VgAPI.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return VgAPI;\n}());\nexports.VgAPI = VgAPI;\n",null]}