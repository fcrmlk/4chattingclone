{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-volume/vg-volume.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-volume/vg-volume.js","mtime":1547199365000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar vg_api_1 = require(\"../../core/services/vg-api\");\nvar VgVolume = /** @class */ /*@__PURE__*/ (function () {\n    function VgVolume(ref, API) {\n        this.API = API;\n        this.subscriptions = [];\n        this.elem = ref.nativeElement;\n        this.isDragging = false;\n    }\n    VgVolume.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n        }\n    };\n    VgVolume.prototype.onPlayerReady = function () {\n        this.target = this.API.getMediaById(this.vgFor);\n        this.ariaValue = this.getVolume() * 100;\n    };\n    VgVolume.prototype.onClick = function (event) {\n        this.setVolume(this.calculateVolume(event.clientX));\n    };\n    VgVolume.prototype.onMouseDown = function (event) {\n        this.mouseDownPosX = event.clientX;\n        this.isDragging = true;\n    };\n    VgVolume.prototype.onDrag = function (event) {\n        if (this.isDragging) {\n            this.setVolume(this.calculateVolume(event.clientX));\n        }\n    };\n    VgVolume.prototype.onStopDrag = function (event) {\n        if (this.isDragging) {\n            this.isDragging = false;\n            if (this.mouseDownPosX === event.clientX) {\n                this.setVolume(this.calculateVolume(event.clientX));\n            }\n        }\n    };\n    VgVolume.prototype.arrowAdjustVolume = function (event) {\n        if (event.keyCode === 38 || event.keyCode === 39) {\n            event.preventDefault();\n            this.setVolume(Math.max(0, Math.min(100, (this.getVolume() * 100) + 10)));\n        }\n        else if (event.keyCode === 37 || event.keyCode === 40) {\n            event.preventDefault();\n            this.setVolume(Math.max(0, Math.min(100, (this.getVolume() * 100) - 10)));\n        }\n    };\n    VgVolume.prototype.calculateVolume = function (mousePosX) {\n        var recObj = this.volumeBarRef.nativeElement.getBoundingClientRect();\n        var volumeBarOffsetLeft = recObj.left;\n        var volumeBarWidth = recObj.width;\n        return (mousePosX - volumeBarOffsetLeft) / volumeBarWidth * 100;\n    };\n    VgVolume.prototype.setVolume = function (vol) {\n        this.target.volume = Math.max(0, Math.min(1, vol / 100));\n        this.ariaValue = this.target.volume * 100;\n    };\n    VgVolume.prototype.getVolume = function () {\n        return this.target ? this.target.volume : 0;\n    };\n    VgVolume.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    VgVolume.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'vg-volume',\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    template: \"\\n        <div \\n            #volumeBar\\n            class=\\\"volumeBar\\\"\\n            tabindex=\\\"0\\\"\\n            role=\\\"slider\\\"\\n            aria-label=\\\"volume level\\\"\\n            aria-level=\\\"polite\\\"\\n            [attr.aria-valuenow]=\\\"ariaValue\\\"\\n            aria-valuemin=\\\"0\\\"\\n            aria-valuemax=\\\"100\\\"\\n            aria-orientation=\\\"horizontal\\\"\\n            [attr.aria-valuetext]=\\\"ariaValue + '%'\\\"\\n            (click)=\\\"onClick($event)\\\"\\n            (mousedown)=\\\"onMouseDown($event)\\\">\\n            <div class=\\\"volumeBackground\\\" [ngClass]=\\\"{dragging: isDragging}\\\">\\n                <div class=\\\"volumeValue\\\" [style.width]=\\\"(getVolume() * (100-15)) + '%'\\\"></div>\\n                <div class=\\\"volumeKnob\\\" [style.left]=\\\"(getVolume() * (100-15)) + '%'\\\"></div>\\n            </div>\\n        </div>\\n    \",\n                    styles: [\"\\n        vg-volume {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 100px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n        vg-volume .volumeBar {\\n            position: relative;\\n            display: flex;\\n            flex-grow: 1;\\n            align-items: center;\\n        }\\n        vg-volume .volumeBackground {\\n            display: flex;\\n            flex-grow: 1;\\n            height: 5px;\\n            pointer-events: none;\\n            background-color: #333;\\n        }\\n        vg-volume .volumeValue {\\n            display: flex;\\n            height: 5px;\\n            pointer-events: none;\\n            background-color: #FFF;\\n            transition:all 0.2s ease-out;\\n        }\\n        vg-volume .volumeKnob {\\n            position: absolute;\\n            width: 15px; height: 15px;\\n            left: 0; top: 50%;\\n            transform: translateY(-50%);\\n            border-radius: 15px;\\n            pointer-events: none;\\n            background-color: #FFF;\\n            transition:all 0.2s ease-out;\\n        }\\n        vg-volume .volumeBackground.dragging .volumeValue,\\n        vg-volume .volumeBackground.dragging .volumeKnob {\\n            transition: none;\\n        }\\n    \"]\n                },] },\n    ];\n    VgVolume.propDecorators = {\n        vgFor: [{ type: core_1.Input }],\n        volumeBarRef: [{ type: core_1.ViewChild, args: ['volumeBar',] }],\n        onDrag: [{ type: core_1.HostListener, args: ['document:mousemove', ['$event'],] }],\n        onStopDrag: [{ type: core_1.HostListener, args: ['document:mouseup', ['$event'],] }],\n        arrowAdjustVolume: [{ type: core_1.HostListener, args: ['keydown', ['$event'],] }]\n    };\n    return VgVolume;\n}());\nexports.VgVolume = VgVolume;\n",null]}