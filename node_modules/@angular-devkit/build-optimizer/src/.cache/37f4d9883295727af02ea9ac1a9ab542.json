{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-mute/vg-mute.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-mute/vg-mute.js","mtime":1547199365000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar vg_api_1 = require(\"../../core/services/vg-api\");\nvar VgMute = /** @class */ /*@__PURE__*/ (function () {\n    function VgMute(ref, API) {\n        this.API = API;\n        this.subscriptions = [];\n        this.ariaValue = 'unmuted';\n        this.elem = ref.nativeElement;\n    }\n    VgMute.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n        }\n    };\n    VgMute.prototype.onPlayerReady = function () {\n        this.target = this.API.getMediaById(this.vgFor);\n        this.currentVolume = this.target.volume;\n    };\n    VgMute.prototype.onClick = function () {\n        this.changeMuteState();\n    };\n    VgMute.prototype.onKeyDown = function (event) {\n        // On press Enter (13) or Space (32)\n        if (event.keyCode === 13 || event.keyCode === 32) {\n            event.preventDefault();\n            this.changeMuteState();\n        }\n    };\n    VgMute.prototype.changeMuteState = function () {\n        var volume = this.getVolume();\n        if (volume === 0) {\n            if (this.target.volume === 0 && this.currentVolume === 0) {\n                this.currentVolume = 1;\n            }\n            this.target.volume = this.currentVolume;\n        }\n        else {\n            this.currentVolume = volume;\n            this.target.volume = 0;\n        }\n    };\n    VgMute.prototype.getVolume = function () {\n        var volume = this.target ? this.target.volume : 0;\n        this.ariaValue = volume ? 'unmuted' : 'muted';\n        return volume;\n    };\n    VgMute.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    VgMute.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'vg-mute',\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    template: \"\\n        <div class=\\\"icon\\\"\\n             [class.vg-icon-volume_up]=\\\"getVolume() >= 0.75\\\"\\n             [class.vg-icon-volume_down]=\\\"getVolume() >= 0.25 && getVolume() < 0.75\\\"\\n             [class.vg-icon-volume_mute]=\\\"getVolume() > 0 && getVolume() < 0.25\\\"\\n             [class.vg-icon-volume_off]=\\\"getVolume() === 0\\\"\\n             tabindex=\\\"0\\\"\\n             role=\\\"button\\\"\\n             aria-label=\\\"mute button\\\"\\n             [attr.aria-valuetext]=\\\"ariaValue\\\">\\n        </div>\",\n                    styles: [\"\\n        vg-mute {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -khtml-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n\\n        vg-mute .icon {\\n            pointer-events: none;\\n        }\\n    \"]\n                },] },\n    ];\n    VgMute.propDecorators = {\n        vgFor: [{ type: core_1.Input }],\n        onClick: [{ type: core_1.HostListener, args: ['click',] }],\n        onKeyDown: [{ type: core_1.HostListener, args: ['keydown', ['$event'],] }]\n    };\n    return VgMute;\n}());\nexports.VgMute = VgMute;\n",null]}