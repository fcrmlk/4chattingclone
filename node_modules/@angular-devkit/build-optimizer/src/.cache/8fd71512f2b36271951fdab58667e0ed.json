{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-scrub-bar/vg-scrub-bar.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-scrub-bar/vg-scrub-bar.js","mtime":1547199365000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar vg_api_1 = require(\"../../core/services/vg-api\");\nvar vg_controls_hidden_1 = require(\"./../../core/services/vg-controls-hidden\");\nvar vg_states_1 = require(\"../../core/states/vg-states\");\nvar VgScrubBar = /** @class */ /*@__PURE__*/ (function () {\n    function VgScrubBar(ref, API, vgControlsHiddenState) {\n        var _this = this;\n        this.API = API;\n        this.hideScrubBar = false;\n        this.vgSlider = true;\n        this.isSeeking = false;\n        this.wasPlaying = false;\n        this.subscriptions = [];\n        this.elem = ref.nativeElement;\n        this.subscriptions.push(vgControlsHiddenState.isHidden.subscribe(function (hide) { return _this.onHideScrubBar(hide); }));\n    }\n    VgScrubBar.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n        }\n    };\n    VgScrubBar.prototype.onPlayerReady = function () {\n        this.target = this.API.getMediaById(this.vgFor);\n    };\n    VgScrubBar.prototype.seekStart = function () {\n        if (this.target.canPlay) {\n            this.isSeeking = true;\n            if (this.target.state === vg_states_1.VgStates.VG_PLAYING) {\n                this.wasPlaying = true;\n            }\n            this.target.pause();\n        }\n    };\n    VgScrubBar.prototype.seekMove = function (offset) {\n        if (this.isSeeking) {\n            var percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);\n            this.target.time.current = percentage * this.target.time.total / 100;\n            this.target.seekTime(percentage, true);\n        }\n    };\n    VgScrubBar.prototype.seekEnd = function (offset) {\n        this.isSeeking = false;\n        if (this.target.canPlay) {\n            var percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);\n            this.target.seekTime(percentage, true);\n            if (this.wasPlaying) {\n                this.wasPlaying = false;\n                this.target.play();\n            }\n        }\n    };\n    VgScrubBar.prototype.touchEnd = function () {\n        this.isSeeking = false;\n        if (this.wasPlaying) {\n            this.wasPlaying = false;\n            this.target.play();\n        }\n    };\n    VgScrubBar.prototype.getTouchOffset = function (event) {\n        var offsetLeft = 0;\n        var element = event.target;\n        while (element) {\n            offsetLeft += element.offsetLeft;\n            element = element.offsetParent;\n        }\n        return event.touches[0].pageX - offsetLeft;\n    };\n    VgScrubBar.prototype.onMouseDownScrubBar = function ($event) {\n        if (this.target) {\n            if (!this.target.isLive) {\n                if (!this.vgSlider) {\n                    this.seekEnd($event.offsetX);\n                }\n                else {\n                    this.seekStart();\n                }\n            }\n        }\n    };\n    VgScrubBar.prototype.onMouseMoveScrubBar = function ($event) {\n        if (this.target) {\n            if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                this.seekMove($event.offsetX);\n            }\n        }\n    };\n    VgScrubBar.prototype.onMouseUpScrubBar = function ($event) {\n        if (this.target) {\n            if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                this.seekEnd($event.offsetX);\n            }\n        }\n    };\n    VgScrubBar.prototype.onTouchStartScrubBar = function ($event) {\n        if (this.target) {\n            if (!this.target.isLive) {\n                if (!this.vgSlider) {\n                    this.seekEnd(this.getTouchOffset($event));\n                }\n                else {\n                    this.seekStart();\n                }\n            }\n        }\n    };\n    VgScrubBar.prototype.onTouchMoveScrubBar = function ($event) {\n        if (this.target) {\n            if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                this.seekMove(this.getTouchOffset($event));\n            }\n        }\n    };\n    VgScrubBar.prototype.onTouchCancelScrubBar = function ($event) {\n        if (this.target) {\n            if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                this.touchEnd();\n            }\n        }\n    };\n    VgScrubBar.prototype.onTouchEndScrubBar = function ($event) {\n        if (this.target) {\n            if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                this.touchEnd();\n            }\n        }\n    };\n    VgScrubBar.prototype.arrowAdjustVolume = function (event) {\n        if (this.target) {\n            if (event.keyCode === 38 || event.keyCode === 39) {\n                event.preventDefault();\n                this.target.seekTime((this.target.time.current + 5000) / 1000, false);\n            }\n            else if (event.keyCode === 37 || event.keyCode === 40) {\n                event.preventDefault();\n                this.target.seekTime((this.target.time.current - 5000) / 1000, false);\n            }\n        }\n    };\n    VgScrubBar.prototype.getPercentage = function () {\n        return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';\n    };\n    VgScrubBar.prototype.onHideScrubBar = function (hide) {\n        this.hideScrubBar = hide;\n    };\n    VgScrubBar.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    VgScrubBar.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'vg-scrub-bar',\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    template: \"\\n        <div class=\\\"scrubBar\\\"\\n             tabindex=\\\"0\\\"\\n             role=\\\"slider\\\"\\n             aria-label=\\\"scrub bar\\\"\\n             aria-level=\\\"polite\\\"\\n             [attr.aria-valuenow]=\\\"getPercentage()\\\"\\n             aria-valuemin=\\\"0\\\"\\n             aria-valuemax=\\\"100\\\"\\n             [attr.aria-valuetext]=\\\"getPercentage() + '%'\\\">\\n            <ng-content></ng-content>\\n        </div>\\n        \\n    \",\n                    styles: [\"\\n        vg-scrub-bar {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            position: absolute;\\n            width: 100%;\\n            height: 5px;\\n            bottom: 50px;\\n            margin: 0;\\n            cursor: pointer;\\n            align-items: center;\\n            background: rgba(0, 0, 0, 0.75);\\n            z-index: 250;\\n            -webkit-transition: bottom 1s, opacity 0.5s;\\n            -khtml-transition: bottom 1s, opacity 0.5s;\\n            -moz-transition: bottom 1s, opacity 0.5s;\\n            -ms-transition: bottom 1s, opacity 0.5s;\\n            transition: bottom 1s, opacity 0.5s;\\n        }\\n        \\n        vg-scrub-bar .scrubBar {\\n            position: relative;\\n            display: flex;\\n            flex-grow: 1;\\n            align-items: center;\\n            height: 100%;\\n        }\\n\\n        vg-controls vg-scrub-bar {\\n            position: relative;\\n            bottom: 0;\\n            background: transparent;\\n            height: 50px;\\n            flex-grow: 1;\\n            flex-basis: 0;\\n            margin: 0 10px;\\n            -webkit-transition: initial;\\n            -khtml-transition: initial;\\n            -moz-transition: initial;\\n            -ms-transition: initial;\\n            transition: initial;\\n        }\\n\\n        vg-scrub-bar.hide {\\n            bottom: 0;\\n            opacity: 0;\\n        }\\n\\n        vg-controls vg-scrub-bar.hide {\\n            bottom: initial;\\n            opacity: initial;\\n        }\\n    \"]\n                },] },\n    ];\n    VgScrubBar.propDecorators = {\n        hideScrubBar: [{ type: core_1.HostBinding, args: ['class.hide',] }],\n        vgFor: [{ type: core_1.Input }],\n        vgSlider: [{ type: core_1.Input }],\n        onMouseDownScrubBar: [{ type: core_1.HostListener, args: ['mousedown', ['$event'],] }],\n        onMouseMoveScrubBar: [{ type: core_1.HostListener, args: ['document:mousemove', ['$event'],] }],\n        onMouseUpScrubBar: [{ type: core_1.HostListener, args: ['document:mouseup', ['$event'],] }],\n        onTouchStartScrubBar: [{ type: core_1.HostListener, args: ['touchstart', ['$event'],] }],\n        onTouchMoveScrubBar: [{ type: core_1.HostListener, args: ['document:touchmove', ['$event'],] }],\n        onTouchCancelScrubBar: [{ type: core_1.HostListener, args: ['document:touchcancel', ['$event'],] }],\n        onTouchEndScrubBar: [{ type: core_1.HostListener, args: ['document:touchend', ['$event'],] }],\n        arrowAdjustVolume: [{ type: core_1.HostListener, args: ['keydown', ['$event'],] }]\n    };\n    return VgScrubBar;\n}());\nexports.VgScrubBar = VgScrubBar;\n",null]}