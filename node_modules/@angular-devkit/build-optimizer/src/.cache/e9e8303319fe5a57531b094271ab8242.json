{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/core/vg-media/vg-media.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/core/vg-media/vg-media.js","mtime":1547199364000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar rxjs_1 = require(\"rxjs\");\nvar vg_states_1 = require(\"../states/vg-states\");\nvar vg_api_1 = require(\"../services/vg-api\");\nvar vg_events_1 = require(\"../events/vg-events\");\nvar rxjs_2 = require(\"rxjs\");\nvar VgMedia = /** @class */ /*@__PURE__*/ (function () {\n    function VgMedia(api, ref) {\n        this.api = api;\n        this.ref = ref;\n        this.state = vg_states_1.VgStates.VG_PAUSED;\n        this.time = { current: 0, total: 0, left: 0 };\n        this.buffer = { end: 0 };\n        this.canPlay = false;\n        this.canPlayThrough = false;\n        this.isMetadataLoaded = false;\n        this.isWaiting = false;\n        this.isCompleted = false;\n        this.isLive = false;\n        this.isBufferDetected = false;\n        this.checkInterval = 200;\n        this.currentPlayPos = 0;\n        this.lastPlayPos = 0;\n        this.playAtferSync = false;\n        this.bufferDetected = new rxjs_1.Subject();\n    }\n    VgMedia.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.vgMedia.nodeName) {\n            // It's a native element\n            this.elem = this.vgMedia;\n        }\n        else {\n            // It's an Angular Class\n            this.elem = this.vgMedia.elem;\n        }\n        // Just in case we're creating this vgMedia dynamically register again into API\n        this.api.registerMedia(this);\n        this.subscriptions = {\n            // Native events\n            abort: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_ABORT),\n            canPlay: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_CAN_PLAY),\n            canPlayThrough: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_CAN_PLAY_THROUGH),\n            durationChange: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_DURATION_CHANGE),\n            emptied: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_EMPTIED),\n            encrypted: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_ENCRYPTED),\n            ended: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_ENDED),\n            error: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_ERROR),\n            loadedData: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_LOADED_DATA),\n            loadedMetadata: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_LOADED_METADATA),\n            loadStart: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_LOAD_START),\n            pause: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_PAUSE),\n            play: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_PLAY),\n            playing: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_PLAYING),\n            progress: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_PROGRESS),\n            rateChange: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_RATE_CHANGE),\n            seeked: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_SEEKED),\n            seeking: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_SEEKING),\n            stalled: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_STALLED),\n            suspend: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_SUSPEND),\n            timeUpdate: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_TIME_UPDATE),\n            volumeChange: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_VOLUME_CHANGE),\n            waiting: rxjs_1.fromEvent(this.elem, vg_events_1.VgEvents.VG_WAITING),\n            // Advertisement only events\n            startAds: rxjs_1.fromEvent(window, vg_events_1.VgEvents.VG_START_ADS),\n            endAds: rxjs_1.fromEvent(window, vg_events_1.VgEvents.VG_END_ADS),\n            // See changes on <source> child elements to reload the video file\n            mutation: rxjs_1.Observable.create(function (observer) {\n                var domObs = new MutationObserver(function (mutations) {\n                    observer.next(mutations);\n                });\n                domObs.observe(_this.elem, { childList: true, attributes: true });\n                return function () {\n                    domObs.disconnect();\n                };\n            }),\n            // Custom buffering detection\n            bufferDetected: this.bufferDetected\n        };\n        this.mutationObs = this.subscriptions.mutation.subscribe(this.onMutation.bind(this));\n        this.canPlayObs = this.subscriptions.canPlay.subscribe(this.onCanPlay.bind(this));\n        this.canPlayThroughObs = this.subscriptions.canPlayThrough.subscribe(this.onCanPlayThrough.bind(this));\n        this.loadedMetadataObs = this.subscriptions.loadedMetadata.subscribe(this.onLoadMetadata.bind(this));\n        this.waitingObs = this.subscriptions.waiting.subscribe(this.onWait.bind(this));\n        this.progressObs = this.subscriptions.progress.subscribe(this.onProgress.bind(this));\n        this.endedObs = this.subscriptions.ended.subscribe(this.onComplete.bind(this));\n        this.playingObs = this.subscriptions.playing.subscribe(this.onStartPlaying.bind(this));\n        this.playObs = this.subscriptions.play.subscribe(this.onPlay.bind(this));\n        this.pauseObs = this.subscriptions.pause.subscribe(this.onPause.bind(this));\n        this.timeUpdateObs = this.subscriptions.timeUpdate.subscribe(this.onTimeUpdate.bind(this));\n        this.volumeChangeObs = this.subscriptions.volumeChange.subscribe(this.onVolumeChange.bind(this));\n        this.errorObs = this.subscriptions.error.subscribe(this.onError.bind(this));\n        if (this.vgMaster) {\n            this.api.playerReadyEvent.subscribe(function () {\n                _this.prepareSync();\n            });\n        }\n    };\n    VgMedia.prototype.prepareSync = function () {\n        var _this = this;\n        var canPlayAll = [];\n        for (var media in this.api.medias) {\n            if (this.api.medias[media]) {\n                canPlayAll.push(this.api.medias[media].subscriptions.canPlay);\n            }\n        }\n        this.canPlayAllSubscription = rxjs_2.combineLatest(canPlayAll, function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            var allReady = params.some(function (event) { return event.target.readyState === 4; });\n            if (allReady && !_this.syncSubscription) {\n                _this.startSync();\n                _this.syncSubscription.unsubscribe();\n            }\n        }).subscribe();\n    };\n    VgMedia.prototype.startSync = function () {\n        var _this = this;\n        this.syncSubscription = rxjs_2.timer(0, 1000).subscribe(function () {\n            for (var media in _this.api.medias) {\n                if (_this.api.medias[media] !== _this) {\n                    var diff = _this.api.medias[media].currentTime - _this.currentTime;\n                    if (diff < -0.3 || diff > 0.3) {\n                        _this.playAtferSync = (_this.state === vg_states_1.VgStates.VG_PLAYING);\n                        _this.pause();\n                        _this.api.medias[media].pause();\n                        _this.api.medias[media].currentTime = _this.currentTime;\n                    }\n                    else {\n                        if (_this.playAtferSync) {\n                            _this.play();\n                            _this.api.medias[media].play();\n                            _this.playAtferSync = false;\n                        }\n                    }\n                }\n            }\n        });\n    };\n    VgMedia.prototype.onMutation = function (mutations) {\n        // Detect changes only for source elements or src attribute\n        for (var i = 0, l = mutations.length; i < l; i++) {\n            var mut = mutations[i];\n            if (mut.type === 'attributes' && mut.attributeName === 'src') {\n                // Only load src file if it's not a blob (for DASH / HLS sources)\n                if (mut.target['src'] && mut.target['src'].length > 0 && mut.target['src'].indexOf('blob:') < 0) {\n                    this.loadMedia();\n                    break;\n                }\n            }\n            else if (mut.type === 'childList' && mut.removedNodes.length && mut.removedNodes[0].nodeName.toLowerCase() === 'source') {\n                this.loadMedia();\n                break;\n            }\n        }\n    };\n    VgMedia.prototype.loadMedia = function () {\n        var _this = this;\n        this.vgMedia.pause();\n        this.vgMedia.currentTime = 0;\n        // Start buffering until we can play the media file\n        this.stopBufferCheck();\n        this.isBufferDetected = true;\n        this.bufferDetected.next(this.isBufferDetected);\n        // TODO: This is ugly, we should find something cleaner. For some reason a TimerObservable doesn't works.\n        setTimeout(function () { return _this.vgMedia.load(); }, 10);\n    };\n    VgMedia.prototype.play = function () {\n        var _this = this;\n        // short-circuit if already playing\n        if (this.playPromise || (this.state !== vg_states_1.VgStates.VG_PAUSED && this.state !== vg_states_1.VgStates.VG_ENDED)) {\n            return;\n        }\n        this.playPromise = this.vgMedia.play();\n        // browser has async play promise\n        if (this.playPromise && this.playPromise.then && this.playPromise.catch) {\n            this.playPromise\n                .then(function () {\n                _this.playPromise = null;\n            })\n                .catch(function () {\n                _this.playPromise = null;\n                // deliberately empty for the sake of eating console noise\n            });\n        }\n        return this.playPromise;\n    };\n    VgMedia.prototype.pause = function () {\n        var _this = this;\n        // browser has async play promise\n        if (this.playPromise) {\n            this.playPromise\n                .then(function () {\n                _this.vgMedia.pause();\n            });\n        }\n        else {\n            this.vgMedia.pause();\n        }\n    };\n    Object.defineProperty(VgMedia.prototype, \"id\", {\n        get: function () {\n            // We should return undefined if vgMedia still doesn't exist\n            var result = undefined;\n            if (this.vgMedia) {\n                result = this.vgMedia.id;\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgMedia.prototype, \"duration\", {\n        get: function () {\n            return this.vgMedia.duration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgMedia.prototype, \"currentTime\", {\n        get: function () {\n            return this.vgMedia.currentTime;\n        },\n        set: function (seconds) {\n            this.vgMedia.currentTime = seconds;\n            // this.elem.dispatchEvent(new CustomEvent(VgEvents.VG_SEEK));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgMedia.prototype, \"volume\", {\n        get: function () {\n            return this.vgMedia.volume;\n        },\n        set: function (volume) {\n            this.vgMedia.volume = volume;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgMedia.prototype, \"playbackRate\", {\n        get: function () {\n            return this.vgMedia.playbackRate;\n        },\n        set: function (rate) {\n            this.vgMedia.playbackRate = rate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgMedia.prototype, \"buffered\", {\n        get: function () {\n            return this.vgMedia.buffered;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VgMedia.prototype, \"textTracks\", {\n        get: function () {\n            return this.vgMedia.textTracks;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VgMedia.prototype.onCanPlay = function (event) {\n        this.isBufferDetected = false;\n        this.bufferDetected.next(this.isBufferDetected);\n        this.canPlay = true;\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onCanPlayThrough = function (event) {\n        this.isBufferDetected = false;\n        this.bufferDetected.next(this.isBufferDetected);\n        this.canPlayThrough = true;\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onLoadMetadata = function (event) {\n        this.isMetadataLoaded = true;\n        this.time = {\n            current: 0,\n            left: 0,\n            total: this.duration * 1000\n        };\n        this.state = vg_states_1.VgStates.VG_PAUSED;\n        // Live streaming check\n        var t = Math.round(this.time.total);\n        this.isLive = (t === Infinity);\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onWait = function (event) {\n        this.isWaiting = true;\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onComplete = function (event) {\n        this.isCompleted = true;\n        this.state = vg_states_1.VgStates.VG_ENDED;\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onStartPlaying = function (event) {\n        this.state = vg_states_1.VgStates.VG_PLAYING;\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onPlay = function (event) {\n        this.state = vg_states_1.VgStates.VG_PLAYING;\n        if (this.vgMaster) {\n            if (!this.syncSubscription || this.syncSubscription.closed) {\n                this.startSync();\n            }\n        }\n        this.startBufferCheck();\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onPause = function (event) {\n        this.state = vg_states_1.VgStates.VG_PAUSED;\n        if (this.vgMaster) {\n            if (!this.playAtferSync) {\n                this.syncSubscription.unsubscribe();\n            }\n        }\n        this.stopBufferCheck();\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onTimeUpdate = function (event) {\n        var end = this.buffered.length - 1;\n        this.time = {\n            current: this.currentTime * 1000,\n            total: this.time.total,\n            left: (this.duration - this.currentTime) * 1000\n        };\n        if (end >= 0) {\n            this.buffer = { end: this.buffered.end(end) * 1000 };\n        }\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onProgress = function (event) {\n        var end = this.buffered.length - 1;\n        if (end >= 0) {\n            this.buffer = { end: this.buffered.end(end) * 1000 };\n        }\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onVolumeChange = function (event) {\n        // TODO: Save to localstorage the current volume\n        this.ref.detectChanges();\n    };\n    VgMedia.prototype.onError = function (event) {\n        // TODO: Handle error messages\n        this.ref.detectChanges();\n    };\n    // http://stackoverflow.com/a/23828241/779529\n    VgMedia.prototype.bufferCheck = function () {\n        var offset = 1 / this.checkInterval;\n        this.currentPlayPos = this.currentTime;\n        if (!this.isBufferDetected && this.currentPlayPos < (this.lastPlayPos + offset)) {\n            this.isBufferDetected = true;\n        }\n        if (this.isBufferDetected && this.currentPlayPos > (this.lastPlayPos + offset)) {\n            this.isBufferDetected = false;\n        }\n        // Prevent calls to bufferCheck after ngOnDestroy have been called\n        if (!this.bufferDetected.closed) {\n            this.bufferDetected.next(this.isBufferDetected);\n        }\n        this.lastPlayPos = this.currentPlayPos;\n    };\n    VgMedia.prototype.startBufferCheck = function () {\n        var _this = this;\n        this.checkBufferSubscription = rxjs_2.timer(0, this.checkInterval).subscribe(function () {\n            _this.bufferCheck();\n        });\n    };\n    VgMedia.prototype.stopBufferCheck = function () {\n        if (this.checkBufferSubscription) {\n            this.checkBufferSubscription.unsubscribe();\n        }\n        this.isBufferDetected = false;\n        this.bufferDetected.next(this.isBufferDetected);\n    };\n    VgMedia.prototype.seekTime = function (value, byPercent) {\n        if (byPercent === void 0) {\n            byPercent = false;\n        }\n        var second;\n        var duration = this.duration;\n        if (byPercent) {\n            second = value * duration / 100;\n        }\n        else {\n            second = value;\n        }\n        this.currentTime = second;\n    };\n    VgMedia.prototype.addTextTrack = function (type, label, language, mode) {\n        var newTrack = this.vgMedia.addTextTrack(type, label, language);\n        if (mode) {\n            newTrack.mode = mode;\n        }\n        return newTrack;\n    };\n    VgMedia.prototype.ngOnDestroy = function () {\n        this.vgMedia.src = '';\n        this.mutationObs.unsubscribe();\n        this.canPlayObs.unsubscribe();\n        this.canPlayThroughObs.unsubscribe();\n        this.loadedMetadataObs.unsubscribe();\n        this.waitingObs.unsubscribe();\n        this.progressObs.unsubscribe();\n        this.endedObs.unsubscribe();\n        this.playingObs.unsubscribe();\n        this.playObs.unsubscribe();\n        this.pauseObs.unsubscribe();\n        this.timeUpdateObs.unsubscribe();\n        this.volumeChangeObs.unsubscribe();\n        this.errorObs.unsubscribe();\n        if (this.checkBufferSubscription) {\n            this.checkBufferSubscription.unsubscribe();\n        }\n        if (this.syncSubscription) {\n            this.syncSubscription.unsubscribe();\n        }\n        this.bufferDetected.complete();\n        this.bufferDetected.unsubscribe();\n        this.api.unregisterMedia(this);\n    };\n    VgMedia.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: '[vgMedia]'\n                },] },\n    ];\n    VgMedia.propDecorators = {\n        vgMedia: [{ type: core_1.Input }],\n        vgMaster: [{ type: core_1.Input }]\n    };\n    return VgMedia;\n}());\nexports.VgMedia = VgMedia;\n",null]}