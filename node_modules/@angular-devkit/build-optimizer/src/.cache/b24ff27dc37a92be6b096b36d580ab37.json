{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-quality-selector/vg-quality-selector.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/controls/vg-quality-selector/vg-quality-selector.js","mtime":1547199365000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar vg_api_1 = require(\"../../core/services/vg-api\");\nvar VgQualitySelector = /** @class */ /*@__PURE__*/ (function () {\n    function VgQualitySelector(ref, API) {\n        this.API = API;\n        this.onBitrateChange = new core_1.EventEmitter();\n        this.subscriptions = [];\n        this.elem = ref.nativeElement;\n    }\n    VgQualitySelector.prototype.ngOnInit = function () {\n    };\n    VgQualitySelector.prototype.ngOnChanges = function (changes) {\n        if (changes['bitrates'].currentValue && changes['bitrates'].currentValue.length) {\n            this.bitrates.forEach(function (item) { return item.label = item.label || Math.round(item.bitrate / 1000).toString(); });\n        }\n    };\n    VgQualitySelector.prototype.selectBitrate = function (index) {\n        this.bitrateSelected = this.bitrates[index];\n        this.onBitrateChange.emit(this.bitrates[index]);\n    };\n    VgQualitySelector.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    VgQualitySelector.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'vg-quality-selector',\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    template: \"\\n        <div class=\\\"container\\\">\\n            <div class=\\\"quality-selected\\\"\\n                 [class.vg-icon-hd]=\\\"!bitrateSelected\\\">\\n                {{ bitrateSelected?.label }}\\n            </div>\\n            \\n            <select class=\\\"quality-selector\\\" \\n                    (change)=\\\"selectBitrate($event.target.value)\\\"\\n                    tabindex=\\\"0\\\"\\n                    aria-label=\\\"quality selector\\\"\\n                    [attr.aria-valuetext]=\\\"ariaValue\\\">\\n                <option \\n                    *ngFor=\\\"let bitrate of bitrates\\\"\\n                    [value]=\\\"bitrate.qualityIndex\\\"\\n                    [selected]=\\\"bitrate.qualityIndex === bitrateSelected?.qualityIndex\\\">\\n                    {{ bitrate.label }}\\n                </option>\\n            </select>\\n        </div>\\n    \",\n                    styles: [\"\\n        vg-quality-selector {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            width: 50px;\\n            height: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n        vg-quality-selector .container {\\n            position: relative;\\n            display: flex;\\n            flex-grow: 1;\\n            align-items: center;\\n            \\n            padding: 0;\\n            margin: 5px;\\n        }\\n        vg-quality-selector select.quality-selector {\\n            width: 50px;\\n            padding: 5px 8px;\\n            border: none;\\n            background: none;\\n            -webkit-appearance: none;\\n            -moz-appearance: none;\\n            appearance: none;\\n            color: transparent;\\n            font-size: 16px;\\n        }\\n        vg-quality-selector select.quality-selector::-ms-expand {\\n            display: none;\\n        }\\n        vg-quality-selector select.quality-selector option {\\n            color: #000;\\n        }\\n        vg-quality-selector .quality-selected {\\n            position: absolute;\\n            width: 100%;\\n            height: 50px;\\n            top: -6px;\\n            text-align: center;\\n            text-transform: uppercase;\\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\\n            padding-top: 2px;\\n            pointer-events: none;\\n        }\\n        vg-quality-selector .vg-icon-closed_caption:before {\\n            width: 100%;\\n        }\\n    \"]\n                },] },\n    ];\n    VgQualitySelector.propDecorators = {\n        bitrates: [{ type: core_1.Input }],\n        onBitrateChange: [{ type: core_1.Output }]\n    };\n    return VgQualitySelector;\n}());\nexports.VgQualitySelector = VgQualitySelector;\n",null]}