{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/angular-google-charts/fesm5/angular-google-charts.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/angular-google-charts/fesm5/angular-google-charts.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_angular_core,rxjs,rxjs_operators PURE_IMPORTS_END */\nimport { __extends, __assign, __spread, __values } from 'tslib';\nimport { InjectionToken, Injectable, Inject, LOCALE_ID, Optional, Component, ChangeDetectionStrategy, ElementRef, Input, Output, EventEmitter, NgModule } from '@angular/core';\nimport { of, Observable, Subject, fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar CHART_VERSION = /*@__PURE__*/ new InjectionToken('CHART_VERSION');\n/** @type {?} */\nvar GOOGLE_API_KEY = /*@__PURE__*/ new InjectionToken('GOOGLE_API_KEY');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ScriptLoaderService = /** @class */ /*@__PURE__*/ (function () {\n    function ScriptLoaderService(localeId, googleApiKey, chartVersion) {\n        this.localeId = localeId;\n        this.googleApiKey = googleApiKey;\n        this.chartVersion = chartVersion;\n        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';\n        this.onLoadSubject = new Subject();\n        this.initialize();\n    }\n    Object.defineProperty(ScriptLoaderService.prototype, \"onReady\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.doneLoading) {\n                return of(true);\n            }\n            return this.onLoadSubject.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ScriptLoaderService.prototype, \"doneLoading\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n                return false;\n            }\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ScriptLoaderService.prototype, \"isLoading\", {\n        get: /**\n         * @private\n         * @return {?}\n         */ function () {\n            var _this = this;\n            if (this.doneLoading) {\n                return false;\n            }\n            /** @type {?} */\n            var pageScripts = Array.from(document.getElementsByTagName('script'));\n            /** @type {?} */\n            var googleChartsScript = pageScripts.find(( /**\n             * @param {?} script\n             * @return {?}\n             */function (script) { return script.src === _this.scriptSource; }));\n            return googleChartsScript !== undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} packages\n     * @return {?}\n     */\n    ScriptLoaderService.prototype.loadChartPackages = /**\n     * @param {?} packages\n     * @return {?}\n     */\n        function (packages) {\n            var _this = this;\n            return new Observable(( /**\n             * @param {?} observer\n             * @return {?}\n             */function (observer) {\n                /** @type {?} */\n                var config = {\n                    packages: packages,\n                    language: _this.localeId,\n                    mapsApiKey: _this.googleApiKey\n                };\n                google.charts.load(_this.chartVersion, config);\n                google.charts.setOnLoadCallback(( /**\n                 * @return {?}\n                 */function () {\n                    observer.next();\n                    observer.complete();\n                }));\n            }));\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    ScriptLoaderService.prototype.initialize = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.doneLoading && !this.isLoading) {\n                /** @type {?} */\n                var script = this.createScriptElement();\n                script.onload = ( /**\n                 * @return {?}\n                 */function () {\n                    _this.onLoadSubject.next(true);\n                    _this.onLoadSubject.complete();\n                });\n                script.onerror = ( /**\n                 * @return {?}\n                 */function () {\n                    console.error('Failed to load the google chart script!');\n                    _this.onLoadSubject.error('Failed to load the google chart script!');\n                    _this.onLoadSubject.complete();\n                });\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    ScriptLoaderService.prototype.createScriptElement = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var script = document.createElement('script');\n            script.type = 'text/javascript';\n            script.src = this.scriptSource;\n            script.async = true;\n            document.getElementsByTagName('head')[0].appendChild(script);\n            return script;\n        };\n    return ScriptLoaderService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar GoogleChartPackagesHelper = /** @class */ /*@__PURE__*/ (function () {\n    function GoogleChartPackagesHelper() {\n    }\n    /**\n     * @param {?} chartName\n     * @return {?}\n     */\n    GoogleChartPackagesHelper.getPackageForChartName = /**\n     * @param {?} chartName\n     * @return {?}\n     */\n        function (chartName) {\n            return GoogleChartPackagesHelper.ChartTypesToPackages[chartName];\n        };\n    GoogleChartPackagesHelper.ChartTypesToPackages = {\n        AnnotationChart: 'annotationchart',\n        AreaChart: 'corechart',\n        Bar: 'bar',\n        BarChart: 'corechart',\n        BubbleChart: 'corechart',\n        Calendar: 'calendar',\n        CandlestickChart: 'corechart',\n        ColumnChart: 'corechart',\n        ComboChart: 'corechart',\n        PieChart: 'corechart',\n        Gantt: 'gantt',\n        Gauge: 'gauge',\n        GeoChart: 'geochart',\n        Histogram: 'corechart',\n        Line: 'line',\n        LineChart: 'corechart',\n        Map: 'map',\n        OrgChart: 'orgchart',\n        Sankey: 'sankey',\n        Scatter: 'scatter',\n        ScatterChart: 'corechart',\n        SteppedAreaChart: 'corechart',\n        Table: 'table',\n        Timeline: 'timeline',\n        TreeMap: 'treemap',\n        WordTree: 'wordtree'\n    };\n    return GoogleChartPackagesHelper;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar RawChartComponent = /** @class */ /*@__PURE__*/ (function () {\n    function RawChartComponent(element, loaderService) {\n        this.element = element;\n        this.loaderService = loaderService;\n        this.dynamicResize = false;\n        this.firstRowIsData = false;\n        this.error = new EventEmitter();\n        this.ready = new EventEmitter();\n        this.select = new EventEmitter();\n        this.mouseenter = new EventEmitter();\n        this.mouseleave = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    RawChartComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.chartData == null) {\n                throw new Error('Can\\'t create a Google Chart without data!');\n            }\n            this.loaderService.onReady.subscribe(( /**\n             * @return {?}\n             */function () {\n                _this.createChart();\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    RawChartComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.addResizeListener();\n        };\n    /**\n     * @return {?}\n     */\n    RawChartComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            if (this.wrapper) {\n                this.updateChart();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    RawChartComponent.prototype.getChartElement = /**\n     * @return {?}\n     */\n        function () {\n            return this.element.nativeElement.firstElementChild;\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    RawChartComponent.prototype.createChart = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.loadNeededPackages().subscribe(( /**\n             * @return {?}\n             */function () {\n                _this.wrapper = new google.visualization.ChartWrapper();\n                _this.updateChart();\n            }));\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    RawChartComponent.prototype.loadNeededPackages = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            return this.loaderService.loadChartPackages([GoogleChartPackagesHelper.getPackageForChartName(this.chartData.chartType)]);\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    RawChartComponent.prototype.updateChart = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            // This check here is important to allow passing of a created dataTable as well as just an array\n            if (!(this.chartData.dataTable instanceof google.visualization.DataTable)) {\n                this.dataTable = google.visualization.arrayToDataTable(( /** @type {?} */(this.chartData.dataTable)), this.firstRowIsData);\n            }\n            else {\n                this.dataTable = this.chartData.dataTable;\n            }\n            this.wrapper.setDataTable(this.dataTable);\n            this.wrapper.setChartType(this.chartData.chartType);\n            this.wrapper.setOptions(this.chartData.options);\n            this.wrapper.setDataSourceUrl(this.chartData.dataSourceUrl);\n            this.wrapper.setQuery(this.chartData.query);\n            this.wrapper.setRefreshInterval(this.chartData.refreshInterval);\n            this.wrapper.setView(this.chartData.view);\n            this.removeChartEvents();\n            this.registerChartEvents();\n            if (this.formatter) {\n                this.formatData(this.dataTable);\n            }\n            this.wrapper.draw(this.element.nativeElement);\n        };\n    /**\n     * @protected\n     * @param {?} dataTable\n     * @return {?}\n     */\n    RawChartComponent.prototype.formatData = /**\n     * @protected\n     * @param {?} dataTable\n     * @return {?}\n     */\n        function (dataTable) {\n            if (this.formatter instanceof Array) {\n                this.formatter.forEach(( /**\n                 * @param {?} value\n                 * @return {?}\n                 */function (value) {\n                    value.formatter.format(dataTable, value.colIndex);\n                }));\n            }\n            else {\n                for (var i = 0; i < dataTable.getNumberOfColumns(); i++) {\n                    this.formatter.format(dataTable, i);\n                }\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    RawChartComponent.prototype.addResizeListener = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.dynamicResize) {\n                fromEvent(window, 'resize')\n                    .pipe(debounceTime(100))\n                    .subscribe(( /**\n             * @return {?}\n             */function () {\n                    _this.ngOnChanges();\n                }));\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    RawChartComponent.prototype.removeChartEvents = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            google.visualization.events.removeAllListeners(this.wrapper);\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    RawChartComponent.prototype.registerChartEvents = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.registerChartEvent(this.wrapper, 'ready', ( /**\n             * @return {?}\n             */function () {\n                _this.registerChartEvent(_this.wrapper.getChart(), 'onmouseover', ( /**\n                 * @param {?} event\n                 * @return {?}\n                 */function (event) { return _this.mouseenter.emit(event); }));\n                _this.registerChartEvent(_this.wrapper.getChart(), 'onmouseout', ( /**\n                 * @param {?} event\n                 * @return {?}\n                 */function (event) { return _this.mouseleave.emit(event); }));\n                _this.ready.emit('Chart Ready');\n            }));\n            this.registerChartEvent(this.wrapper, 'error', ( /**\n             * @param {?} error\n             * @return {?}\n             */function (error) { return _this.error.emit(error); }));\n            this.registerChartEvent(this.wrapper, 'select', ( /**\n             * @return {?}\n             */function () {\n                /** @type {?} */\n                var selection = _this.wrapper.getChart().getSelection();\n                _this.select.emit(selection);\n            }));\n        };\n    /**\n     * @private\n     * @param {?} object\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    RawChartComponent.prototype.registerChartEvent = /**\n     * @private\n     * @param {?} object\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n        function (object, eventName, callback) {\n            google.visualization.events.addListener(object, eventName, callback);\n        };\n    return RawChartComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar GoogleChartComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(GoogleChartComponent, _super);\n    function GoogleChartComponent(element, loaderService) {\n        var _this = _super.call(this, element, loaderService) || this;\n        _this.roles = new Array();\n        _this.width = undefined;\n        _this.height = undefined;\n        _this.options = {};\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    GoogleChartComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.type == null) {\n                throw new Error('Can\\'t create a Google Chart without specifying a type!');\n            }\n            if (this.data == null) {\n                throw new Error('Can\\'t create a Google Chart without data!');\n            }\n            this.chartData = {\n                chartType: this.type\n            };\n            this.loaderService.onReady.subscribe(( /**\n             * @return {?}\n             */function () {\n                _this.createChart();\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    GoogleChartComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            if (this.wrapper) {\n                this.chartData = {\n                    chartType: this.type,\n                    dataTable: this.getDataTable(),\n                    options: this.parseOptions()\n                };\n            }\n            _super.prototype.ngOnChanges.call(this);\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    GoogleChartComponent.prototype.parseOptions = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            return __assign({ title: this.title, width: this.width, height: this.height }, this.options);\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    GoogleChartComponent.prototype.createChart = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.loadNeededPackages().subscribe(( /**\n             * @return {?}\n             */function () {\n                _this.chartData = {\n                    chartType: _this.type,\n                    dataTable: _this.getDataTable(),\n                    options: _this.parseOptions()\n                };\n                _this.wrapper = new google.visualization.ChartWrapper();\n                _this.updateChart();\n            }));\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    GoogleChartComponent.prototype.getDataTable = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            if (this.columnNames) {\n                /** @type {?} */\n                var columns = this.parseRoles(this.columnNames);\n                this.firstRowIsData = false;\n                return __spread([columns], this.data);\n            }\n            else {\n                this.firstRowIsData = true;\n                return this.data;\n            }\n        };\n    /**\n     * @private\n     * @param {?} columnNames\n     * @return {?}\n     */\n    GoogleChartComponent.prototype.parseRoles = /**\n     * @private\n     * @param {?} columnNames\n     * @return {?}\n     */\n        function (columnNames) {\n            /** @type {?} */\n            var columnNamesWithRoles = columnNames.slice();\n            if (this.roles) {\n                // Roles must be copied to avoid modifying the index everytime there's a change from ngOnChanges.\n                /** @type {?} */\n                var copyRoles_1 = this.roles.map(( /**\n                 * @param {?} role\n                 * @return {?}\n                 */function (role) { return Object.assign({}, role); }));\n                copyRoles_1.forEach(( /**\n                 * @param {?} role\n                 * @return {?}\n                 */function (role) {\n                    var e_1, _a;\n                    /** @type {?} */\n                    var roleData = {\n                        type: role.type,\n                        role: role.role\n                    };\n                    if (role.p) {\n                        roleData.p = role.p;\n                    }\n                    if (role.index != null) {\n                        columnNamesWithRoles.splice(role.index + 1, 0, roleData);\n                        try {\n                            for (var copyRoles_2 = __values(copyRoles_1), copyRoles_2_1 = copyRoles_2.next(); !copyRoles_2_1.done; copyRoles_2_1 = copyRoles_2.next()) {\n                                var otherRole = copyRoles_2_1.value;\n                                if (otherRole === role) {\n                                    continue;\n                                }\n                                if (otherRole.index > role.index) {\n                                    otherRole.index++;\n                                }\n                            }\n                        }\n                        catch (e_1_1) {\n                            e_1 = { error: e_1_1 };\n                        }\n                        finally {\n                            try {\n                                if (copyRoles_2_1 && !copyRoles_2_1.done && (_a = copyRoles_2.return))\n                                    _a.call(copyRoles_2);\n                            }\n                            finally {\n                                if (e_1)\n                                    throw e_1.error;\n                            }\n                        }\n                    }\n                    else {\n                        columnNamesWithRoles.push(roleData);\n                    }\n                }));\n            }\n            return columnNamesWithRoles;\n        };\n    return GoogleChartComponent;\n}(RawChartComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar GOOGLE_CHARTS_PROVIDERS = [\n    {\n        provide: ScriptLoaderService,\n        useFactory: setupScriptLoaderService,\n        deps: [LOCALE_ID, GOOGLE_API_KEY, CHART_VERSION]\n    }\n];\nvar GoogleChartsModule = /** @class */ /*@__PURE__*/ (function () {\n    function GoogleChartsModule() {\n    }\n    /**\n     * @param {?=} googleApiKey\n     * @param {?=} chartVersion\n     * @return {?}\n     */\n    GoogleChartsModule.forRoot = /**\n     * @param {?=} googleApiKey\n     * @param {?=} chartVersion\n     * @return {?}\n     */\n        function (googleApiKey, chartVersion) {\n            return {\n                ngModule: GoogleChartsModule,\n                providers: [\n                    GOOGLE_CHARTS_PROVIDERS,\n                    { provide: GOOGLE_API_KEY, useValue: googleApiKey ? googleApiKey : '' },\n                    { provide: CHART_VERSION, useValue: chartVersion ? chartVersion : '46' }\n                ]\n            };\n        };\n    return GoogleChartsModule;\n}());\n/**\n * @param {?} localeId\n * @param {?} googleApiKey\n * @param {?} chartVersion\n * @return {?}\n */\nfunction setupScriptLoaderService(localeId, googleApiKey, chartVersion) {\n    return new ScriptLoaderService(localeId, googleApiKey, chartVersion);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { GoogleChartComponent, GoogleChartPackagesHelper, GoogleChartsModule, RawChartComponent, ScriptLoaderService, GOOGLE_CHARTS_PROVIDERS as ɵa, setupScriptLoaderService as ɵb, CHART_VERSION as ɵc, GOOGLE_API_KEY as ɵd };\n//# sourceMappingURL=angular-google-charts.js.map\n",null]}