{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/core/vg-player/vg-player.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/core/vg-player/vg-player.js","mtime":1547199365000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar vg_api_1 = require(\"../services/vg-api\");\nvar vg_fullscreen_api_1 = require(\"../services/vg-fullscreen-api\");\nvar vg_utils_1 = require(\"../services/vg-utils\");\nvar vg_media_1 = require(\"../vg-media/vg-media\");\nvar vg_controls_hidden_1 = require(\"../services/vg-controls-hidden\");\nvar VgPlayer = /** @class */ /*@__PURE__*/ (function () {\n    function VgPlayer(ref, api, fsAPI, controlsHidden) {\n        this.api = api;\n        this.fsAPI = fsAPI;\n        this.controlsHidden = controlsHidden;\n        this.isFullscreen = false;\n        this.isNativeFullscreen = false;\n        this.areControlsHidden = false;\n        this.onPlayerReady = new core_1.EventEmitter();\n        this.onMediaReady = new core_1.EventEmitter();\n        this.subscriptions = [];\n        this.elem = ref.nativeElement;\n        this.api.registerElement(this.elem);\n    }\n    VgPlayer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.medias.toArray().forEach(function (media) {\n            _this.api.registerMedia(media);\n        });\n        this.fsAPI.init(this.elem, this.medias);\n        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));\n        this.api.onPlayerReady(this.fsAPI);\n        this.onPlayerReady.emit(this.api);\n    };\n    VgPlayer.prototype.onChangeFullscreen = function (fsState) {\n        if (!this.fsAPI.nativeFullscreen) {\n            this.isFullscreen = fsState;\n            this.zIndex = fsState ? vg_utils_1.VgUtils.getZIndex().toString() : 'auto';\n        }\n        else {\n            this.isNativeFullscreen = fsState;\n        }\n    };\n    VgPlayer.prototype.onHideControls = function (hidden) {\n        this.areControlsHidden = hidden;\n    };\n    VgPlayer.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    VgPlayer.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'vg-player',\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    template: \"<ng-content></ng-content>\",\n                    styles: [\"\\n        vg-player {\\n            font-family: 'videogular';\\n            position: relative;\\n            display: flex;\\n            width: 100%;\\n            height: 100%;\\n            overflow: hidden;\\n            background-color: black;\\n        }\\n\\n        vg-player.fullscreen {\\n            position: fixed;\\n            left: 0;\\n            top: 0;\\n        }\\n\\n        vg-player.native-fullscreen.controls-hidden {\\n            cursor: none;\\n        }\\n    \"],\n                    providers: [vg_api_1.VgAPI, vg_fullscreen_api_1.VgFullscreenAPI, vg_controls_hidden_1.VgControlsHidden]\n                },] },\n    ];\n    VgPlayer.propDecorators = {\n        isFullscreen: [{ type: core_1.HostBinding, args: ['class.fullscreen',] }],\n        isNativeFullscreen: [{ type: core_1.HostBinding, args: ['class.native-fullscreen',] }],\n        areControlsHidden: [{ type: core_1.HostBinding, args: ['class.controls-hidden',] }],\n        zIndex: [{ type: core_1.HostBinding, args: ['style.z-index',] }],\n        onPlayerReady: [{ type: core_1.Output }],\n        onMediaReady: [{ type: core_1.Output }],\n        medias: [{ type: core_1.ContentChildren, args: [vg_media_1.VgMedia,] }]\n    };\n    return VgPlayer;\n}());\nexports.VgPlayer = VgPlayer;\n",null]}