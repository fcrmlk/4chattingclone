{"remainingRequest":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/ubuntu/4chatting/node_modules/videogular2/src/overlay-play/vg-overlay-play.js","dependencies":[{"path":"/home/ubuntu/4chatting/node_modules/videogular2/src/overlay-play/vg-overlay-play.js","mtime":1547199365000},{"path":"/home/ubuntu/4chatting/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/4chatting/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar vg_api_1 = require(\"../core/services/vg-api\");\nvar vg_states_1 = require(\"../core/states/vg-states\");\nvar vg_fullscreen_api_1 = require(\"../core/services/vg-fullscreen-api\");\nvar vg_controls_hidden_1 = require(\"../core/services/vg-controls-hidden\");\nvar VgOverlayPlay = /** @class */ /*@__PURE__*/ (function () {\n    function VgOverlayPlay(ref, API, fsAPI, controlsHidden) {\n        this.API = API;\n        this.fsAPI = fsAPI;\n        this.controlsHidden = controlsHidden;\n        this.isNativeFullscreen = false;\n        this.areControlsHidden = false;\n        this.subscriptions = [];\n        this.isBuffering = false;\n        this.elem = ref.nativeElement;\n    }\n    VgOverlayPlay.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.API.isPlayerReady) {\n            this.onPlayerReady();\n        }\n        else {\n            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n        }\n    };\n    VgOverlayPlay.prototype.onPlayerReady = function () {\n        var _this = this;\n        this.target = this.API.getMediaById(this.vgFor);\n        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));\n        this.subscriptions.push(this.target.subscriptions.bufferDetected.subscribe(function (isBuffering) { return _this.onUpdateBuffer(isBuffering); }));\n    };\n    VgOverlayPlay.prototype.onUpdateBuffer = function (isBuffering) {\n        this.isBuffering = isBuffering;\n    };\n    VgOverlayPlay.prototype.onChangeFullscreen = function (fsState) {\n        if (this.fsAPI.nativeFullscreen) {\n            this.isNativeFullscreen = fsState;\n        }\n    };\n    VgOverlayPlay.prototype.onHideControls = function (hidden) {\n        this.areControlsHidden = hidden;\n    };\n    VgOverlayPlay.prototype.onClick = function () {\n        var state = this.getState();\n        switch (state) {\n            case vg_states_1.VgStates.VG_PLAYING:\n                this.target.pause();\n                break;\n            case vg_states_1.VgStates.VG_PAUSED:\n            case vg_states_1.VgStates.VG_ENDED:\n                this.target.play();\n                break;\n        }\n    };\n    VgOverlayPlay.prototype.getState = function () {\n        var state = vg_states_1.VgStates.VG_PAUSED;\n        if (this.target) {\n            if (this.target.state instanceof Array) {\n                for (var i = 0, l = this.target.state.length; i < l; i++) {\n                    if (this.target.state[i] === vg_states_1.VgStates.VG_PLAYING) {\n                        state = vg_states_1.VgStates.VG_PLAYING;\n                        break;\n                    }\n                }\n            }\n            else {\n                state = this.target.state;\n            }\n        }\n        return state;\n    };\n    VgOverlayPlay.prototype.ngOnDestroy = function () {\n        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    VgOverlayPlay.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'vg-overlay-play',\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    template: \"<div class=\\\"vg-overlay-play\\\"\\n                    [class.native-fullscreen]=\\\"isNativeFullscreen\\\"\\n                    [class.controls-hidden]=\\\"areControlsHidden\\\">\\n                   <div class=\\\"overlay-play-container\\\"\\n                        [class.vg-icon-play_arrow]=\\\"getState() !== 'playing'\\\">\\n                   </div>\\n               </div>\",\n                    styles: [\"\\n        vg-overlay-play {\\n            z-index: 200;\\n        }\\n\\n        vg-overlay-play.is-buffering {\\n            display: none;\\n        }\\n\\n        vg-overlay-play .vg-overlay-play {\\n            transition: all 0.5s;\\n            cursor: pointer;\\n            position: absolute;\\n            display: block;\\n            color: white;\\n            width: 100%;\\n            height: 100%;\\n            font-size: 80px;\\n            filter: alpha(opacity=60);\\n            opacity: 0.6;\\n        }\\n\\n        vg-overlay-play .vg-overlay-play.native-fullscreen.controls-hidden {\\n            cursor: none;\\n        }\\n\\n        vg-overlay-play .vg-overlay-play .overlay-play-container.vg-icon-play_arrow {\\n            pointer-events: none;\\n            width: 100%;\\n            height: 100%;\\n            position: absolute;\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            font-size: 80px;\\n        }\\n\\n        vg-overlay-play .vg-overlay-play:hover {\\n            filter: alpha(opacity=100);\\n            opacity: 1;\\n        }\\n\\n        vg-overlay-play .vg-overlay-play:hover .overlay-play-container.vg-icon-play_arrow:before {\\n            transform: scale(1.2);\\n        }\\n    \"]\n                },] },\n    ];\n    VgOverlayPlay.propDecorators = {\n        vgFor: [{ type: core_1.Input }],\n        isBuffering: [{ type: core_1.HostBinding, args: ['class.is-buffering',] }],\n        onClick: [{ type: core_1.HostListener, args: ['click',] }]\n    };\n    return VgOverlayPlay;\n}());\nexports.VgOverlayPlay = VgOverlayPlay;\n",null]}