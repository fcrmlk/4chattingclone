"use strict";
var chai_1 = require('chai');
var lib_1 = require('../lib');
describe('service', function () {
    var createService = function (translations) {
        return new lib_1.TranslateService(translations);
    };
    describe('#hasTranslation', function () {
        it('should give back false if there is no translation for it', function () {
            var service = createService({ key: 'value' });
            chai_1.expect(service.hasTranslation('notExists')).to.eql(false);
        });
        it('should give back true if there is translation for it', function () {
            var service = createService({ what: 'val' });
            chai_1.expect(service.hasTranslation('what')).to.eql(true);
        });
    });
    describe('#translate', function () {
        it('should translate the given simple text', function () {
            var service = createService({ key: 'value' });
            chai_1.expect(service.translate('key')).to.eql('value');
        });
        it('should give back the given text if there is no translation for it', function () {
            var service = createService({ key: 'value' });
            chai_1.expect(service.translate('wrongKey')).to.eql('wrongKey');
        });
        it('should give back the given text with interpolation', function () {
            var service = createService({ key: '%s value %s' });
            chai_1.expect(service.translate('key', ['a', 'b'])).to.eql('a value b');
        });
        it('should handle nested dictionary', function () {
            var service = createService({ root: { nested: 'value' } });
            chai_1.expect(service.translate('root.nested')).to.eql('value');
        });
        it('should give back the given text with interpolation if there is no translation for it', function () {
            var service = createService({ key: 'value' });
            chai_1.expect(service.translate('%s wrongKey %s', ['a', 'b'])).to.eql('a wrongKey b');
        });
        it('should remove the interpolation places if they are not match for the expectations', function () {
            var service = createService({ key: '%s value %d' });
            chai_1.expect(service.translate('key', ['string', 'expects for decimal'])).to.eql(' value ');
        });
    });
    describe('#setTranslations', function () {
        it('should override the initial translations', function () {
            var service = createService({ key: 'value' });
            service.setTranslations({ otherKey: 'value' });
            chai_1.expect(service.translate('key')).to.eql('key');
            chai_1.expect(service.translate('otherKey')).to.eql('value');
        });
    });
});
//# sourceMappingURL=service.spec.js.map